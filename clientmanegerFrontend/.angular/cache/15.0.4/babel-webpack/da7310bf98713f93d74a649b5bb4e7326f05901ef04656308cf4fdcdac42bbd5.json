{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./client.service\";\nimport * as i2 from \"@angular/common\";\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const client_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", client_r1.first_name, \" \");\n  }\n}\nexport class AppComponent {\n  constructor(clientservice) {\n    this.clientservice = clientservice;\n    this.title = 'clientapp';\n    this.clients = [];\n  }\n  ngOnInit() {\n    this.getClients();\n    //throw new Error('Method not implemented.');\n    //alert(\"helloe\");\n  }\n  // public getClients(): void{\n  //   alert(\"yep\");\n  //     this.clientservice.getClient().subscribe((response: client[])=>{\n  //       this.clients=response;\n  //     },\n  //     (error: HttpErrorResponse) =>{alert(error.message);\n  //     }\n  //     );\n  //   }\n  getClients() {\n    this.clientservice.getClient().subscribe({\n      next: response => this.clients = response,\n      error: error => error.message,\n      complete: () => console.info('complete')\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.clientService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AppComponent_div_0_Template, 3, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.clients);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;IAAAA,2BAAoC;IAE9BA,YAAsB;IAAAA,iBAAM;;;;IAA5BA,eAAsB;IAAtBA,qDAAsB;;;ACU5B,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IAFjC,UAAK,GAAG,WAAW;IAGjB,IAAI,CAACC,OAAO,GAAC,EAAE;EACjB;EACAC,QAAQ;IACN,IAAI,CAACC,UAAU,EAAE;IACjB;IACA;EACF;EACF;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EAKA;EAGSA,UAAU;IAEf,IAAI,CAACH,aAAa,CAACI,SAAS,EAAE,CAACC,SAAS,CAAC;MAC5CC,IAAI,EAAEC,QAAkB,IAAK,IAAI,CAACN,OAAO,GAACM,QAAQ;MAClDC,KAAK,EAAGA,KAAuB,IAAKA,KAAK,CAACC,OAAO;MAEjDC,QAAQ,EAAE,MAAMC,OAAO,CAACC,IAAI,CAAC,UAAU;KACnC,CAAC;EAEF;;AArCSd,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDZzBpB,6DAIM;;;MAJkBA,qCAAU","names":["i0","AppComponent","constructor","clientservice","clients","ngOnInit","getClients","getClient","subscribe","next","response","error","message","complete","console","info","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/damoywilliams/clientapp/src/app/app.component.html","/Users/damoywilliams/clientapp/src/app/app.component.ts"],"sourcesContent":["<div *ngFor=\"let client of clients\">\n\n<div> {{client.first_name}} </div>\n\n</div>","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { Client } from './client';\n//import { Client } from './Client';\n//import { Client } from './Client';\nimport { clientService } from './client.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'clientapp';\n    public clients: Client[];\n  constructor(private clientservice: clientService){\n    this.clients=[];\n  }\n  ngOnInit(): void {\n    this.getClients();\n    //throw new Error('Method not implemented.');\n    //alert(\"helloe\");\n  }\n// public getClients(): void{\n//   alert(\"yep\");\n//     this.clientservice.getClient().subscribe((response: client[])=>{\n//       this.clients=response;\n//     },\n     \n//     (error: HttpErrorResponse) =>{alert(error.message);\n    \n//     }\n//     );\n    \n    \n    \n  \n//   }\n\n\n  public getClients(): void{\n  \n    this.clientservice.getClient().subscribe({\n next:(response: Client[]) => this.clients=response,\n error: (error:HttpErrorResponse) => error.message,\n \n complete: () => console.info('complete') \n    })\n    \n    }\n\n\n  }  \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}