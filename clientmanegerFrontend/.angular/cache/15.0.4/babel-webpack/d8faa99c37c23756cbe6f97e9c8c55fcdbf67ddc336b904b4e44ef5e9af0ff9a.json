{"ast":null,"code":"import { environment } from 'src/environments/envirenment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClientService {\n  constructor(http) {\n    this.http = http;\n    this.apiServerUrl = environment.apiBaseUrl;\n  } // use to make http request\n  getClient() {\n    return this.http.get(`${this.apiServerUrl}/client/all`); //the get request is generic we are going to specify it as any so the return type frop the htpp request is any \n  }\n\n  addClient(newclient) {\n    return this.http.post(`${this.apiServerUrl}/lient/insert`, newclient); // post request that returns a client  also pass a body newclient with that request  \n  }\n\n  update(id) {\n    return this.http.put(`${this.apiServerUrl}/client/update/${id}`, \"\"); //  empty body becaut put request needs a body even if it is empty \n  }\n\n  delete(id) {\n    return this.http.delete(`${this.apiServerUrl}/client/delete/${id}`);\n  }\n}\nClientService.ɵfac = function ClientService_Factory(t) {\n  return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n};\nClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientService,\n  factory: ClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAS1D,OAAM,MAAOC,aAAa;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,iBAAY,GAACH,WAAW,CAACI,UAAU;EAEL,CAAC,CAAM;EAEtCC,SAAS;IAEZ,OAAQ,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACC,YAAY,aAAa,CAAC,CAAC,CAAC;EACxE;;EAEOC,SAAS,CAACC,SAAiB;IAE9B,OAAQ,IAAI,CAACN,IAAI,CAACO,IAAI,CAAS,GAAG,IAAI,CAACH,YAAY,eAAe,EAACE,SAAS,CAAC,CAAC,CAAK;EACvF;;EAEOE,MAAM,CAACC,EAAU;IAGpB,OAAQ,IAAI,CAACT,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACN,YAAY,kBAAkBK,EAAE,EAAE,EAAC,EAAE,CAAC,CAAC,CAAE;EACjF;;EAGOE,MAAM,CAACF,EAAU;IAEpB,OAAQ,IAAI,CAACT,IAAI,CAACW,MAAM,CAAO,GAAG,IAAI,CAACP,YAAY,kBAAkBK,EAAE,EAAE,CAAC;EAC9E;;AAzBaX,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAc,SAAbd,aAAa;EAAAe,YALX;AAAM","names":["environment","ClientService","constructor","http","apiBaseUrl","getClient","get","apiServerUrl","addClient","newclient","post","update","id","put","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/damoywilliams/clientapp/src/app/client.service.ts"],"sourcesContent":["import {HttpClient} from'@angular/common/http'\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { environment } from 'src/environments/envirenment';\nimport { Client } from \"./Client\";   // use to make http request\n@Injectable({\n\n    providedIn:'root'\n\n\n})\n\nexport class ClientService{\nprivate apiServerUrl=environment.apiBaseUrl\n\nconstructor(private http: HttpClient){}      // use to make http request\n\npublic getClient(): Observable<Client[]>{  //takes no paramter  return an observable which is a generic and specify the type to any \n\n    return  this.http.get<Client[]>(`${this.apiServerUrl}/client/all`); //the get request is generic we are going to specify it as any so the return type frop the htpp request is any \n}\n\npublic addClient(newclient: Client): Observable<Client>{     // takes a client as parameter   return a client \n\n    return  this.http.post<Client>(`${this.apiServerUrl}/lient/insert`,newclient);     // post request that returns a client  also pass a body newclient with that request  \n}\n\npublic update(id: number): Observable<void>{// dont now retuen anything \n\n   \n    return  this.http.put<void>(`${this.apiServerUrl}/client/update/${id}`,\"\");  //  empty body becaut put request needs a body even if it is empty \n}\n\n\npublic delete(id: number): Observable<void>{\n\n    return  this.http.delete<void>(`${this.apiServerUrl}/client/delete/${id}`);\n}\n\n\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}